// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: api/excel_gen/excel_gen.proto

package excel_gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_REGISTERED Status = 0
	Status_INVALID    Status = 1
	Status_PROCESSING Status = 2
	Status_PROCESSED  Status = 3
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "REGISTERED",
		1: "INVALID",
		2: "PROCESSING",
		3: "PROCESSED",
	}
	Status_value = map[string]int32{
		"REGISTERED": 0,
		"INVALID":    1,
		"PROCESSING": 2,
		"PROCESSED":  3,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_excel_gen_excel_gen_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_api_excel_gen_excel_gen_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_api_excel_gen_excel_gen_proto_rawDescGZIP(), []int{0}
}

type Type int32

const (
	Type_CALCULATIONS      Type = 0
	Type_CALCULATIONS_SUMS Type = 1
	Type_COST              Type = 2
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "CALCULATIONS",
		1: "CALCULATIONS_SUMS",
		2: "COST",
	}
	Type_value = map[string]int32{
		"CALCULATIONS":      0,
		"CALCULATIONS_SUMS": 1,
		"COST":              2,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_excel_gen_excel_gen_proto_enumTypes[1].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_api_excel_gen_excel_gen_proto_enumTypes[1]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_api_excel_gen_excel_gen_proto_rawDescGZIP(), []int{1}
}

type ExcelGenRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  Type                   `protobuf:"varint,1,opt,name=type,proto3,enum=excel_gen.Type" json:"type,omitempty"`
	User  int32                  `protobuf:"zigzag32,2,opt,name=user,proto3" json:"user,omitempty"`
	// Deprecated: Marked as deprecated in api/excel_gen/excel_gen.proto.
	Email         string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Recipients    []string               `protobuf:"bytes,5,rep,name=recipients,proto3" json:"recipients,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExcelGenRequest) Reset() {
	*x = ExcelGenRequest{}
	mi := &file_api_excel_gen_excel_gen_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExcelGenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExcelGenRequest) ProtoMessage() {}

func (x *ExcelGenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_excel_gen_excel_gen_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExcelGenRequest.ProtoReflect.Descriptor instead.
func (*ExcelGenRequest) Descriptor() ([]byte, []int) {
	return file_api_excel_gen_excel_gen_proto_rawDescGZIP(), []int{0}
}

func (x *ExcelGenRequest) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_CALCULATIONS
}

func (x *ExcelGenRequest) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

// Deprecated: Marked as deprecated in api/excel_gen/excel_gen.proto.
func (x *ExcelGenRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ExcelGenRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExcelGenRequest) GetRecipients() []string {
	if x != nil {
		return x.Recipients
	}
	return nil
}

type ExcelGenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        uint64                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Status        Status                 `protobuf:"varint,2,opt,name=status,proto3,enum=excel_gen.Status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExcelGenResponse) Reset() {
	*x = ExcelGenResponse{}
	mi := &file_api_excel_gen_excel_gen_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExcelGenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExcelGenResponse) ProtoMessage() {}

func (x *ExcelGenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_excel_gen_excel_gen_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExcelGenResponse.ProtoReflect.Descriptor instead.
func (*ExcelGenResponse) Descriptor() ([]byte, []int) {
	return file_api_excel_gen_excel_gen_proto_rawDescGZIP(), []int{1}
}

func (x *ExcelGenResponse) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ExcelGenResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_REGISTERED
}

type ExcelGenStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        uint64                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExcelGenStatusRequest) Reset() {
	*x = ExcelGenStatusRequest{}
	mi := &file_api_excel_gen_excel_gen_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExcelGenStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExcelGenStatusRequest) ProtoMessage() {}

func (x *ExcelGenStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_excel_gen_excel_gen_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExcelGenStatusRequest.ProtoReflect.Descriptor instead.
func (*ExcelGenStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_excel_gen_excel_gen_proto_rawDescGZIP(), []int{2}
}

func (x *ExcelGenStatusRequest) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type ExcelGeneralRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	TaskId     *int64                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3,oneof" json:"task_id,omitempty"`
	Data       *structpb.Struct       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Template   string                 `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty"`
	Recipients []string               `protobuf:"bytes,4,rep,name=recipients,proto3" json:"recipients,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Types that are valid to be assigned to Items:
	//
	//	*ExcelGeneralRequest_CostWithDebtors
	//	*ExcelGeneralRequest_ProjectsAndDebtors
	Items         isExcelGeneralRequest_Items `protobuf_oneof:"items"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExcelGeneralRequest) Reset() {
	*x = ExcelGeneralRequest{}
	mi := &file_api_excel_gen_excel_gen_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExcelGeneralRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExcelGeneralRequest) ProtoMessage() {}

func (x *ExcelGeneralRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_excel_gen_excel_gen_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExcelGeneralRequest.ProtoReflect.Descriptor instead.
func (*ExcelGeneralRequest) Descriptor() ([]byte, []int) {
	return file_api_excel_gen_excel_gen_proto_rawDescGZIP(), []int{3}
}

func (x *ExcelGeneralRequest) GetTaskId() int64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

func (x *ExcelGeneralRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExcelGeneralRequest) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *ExcelGeneralRequest) GetRecipients() []string {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *ExcelGeneralRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExcelGeneralRequest) GetItems() isExcelGeneralRequest_Items {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ExcelGeneralRequest) GetCostWithDebtors() *CostWithDebtors {
	if x != nil {
		if x, ok := x.Items.(*ExcelGeneralRequest_CostWithDebtors); ok {
			return x.CostWithDebtors
		}
	}
	return nil
}

func (x *ExcelGeneralRequest) GetProjectsAndDebtors() *ProjectsAndDebtors {
	if x != nil {
		if x, ok := x.Items.(*ExcelGeneralRequest_ProjectsAndDebtors); ok {
			return x.ProjectsAndDebtors
		}
	}
	return nil
}

type isExcelGeneralRequest_Items interface {
	isExcelGeneralRequest_Items()
}

type ExcelGeneralRequest_CostWithDebtors struct {
	CostWithDebtors *CostWithDebtors `protobuf:"bytes,6,opt,name=cost_with_debtors,json=costWithDebtors,proto3,oneof"`
}

type ExcelGeneralRequest_ProjectsAndDebtors struct {
	ProjectsAndDebtors *ProjectsAndDebtors `protobuf:"bytes,7,opt,name=projects_and_debtors,json=projectsAndDebtors,proto3,oneof"`
}

func (*ExcelGeneralRequest_CostWithDebtors) isExcelGeneralRequest_Items() {}

func (*ExcelGeneralRequest_ProjectsAndDebtors) isExcelGeneralRequest_Items() {}

type CostWithDebtors struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Items         []*CostWithDebtors_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CostWithDebtors) Reset() {
	*x = CostWithDebtors{}
	mi := &file_api_excel_gen_excel_gen_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostWithDebtors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostWithDebtors) ProtoMessage() {}

func (x *CostWithDebtors) ProtoReflect() protoreflect.Message {
	mi := &file_api_excel_gen_excel_gen_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostWithDebtors.ProtoReflect.Descriptor instead.
func (*CostWithDebtors) Descriptor() ([]byte, []int) {
	return file_api_excel_gen_excel_gen_proto_rawDescGZIP(), []int{4}
}

func (x *CostWithDebtors) GetItems() []*CostWithDebtors_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type ProjectsAndDebtors struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Items         []*ProjectsAndDebtors_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectsAndDebtors) Reset() {
	*x = ProjectsAndDebtors{}
	mi := &file_api_excel_gen_excel_gen_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectsAndDebtors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectsAndDebtors) ProtoMessage() {}

func (x *ProjectsAndDebtors) ProtoReflect() protoreflect.Message {
	mi := &file_api_excel_gen_excel_gen_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectsAndDebtors.ProtoReflect.Descriptor instead.
func (*ProjectsAndDebtors) Descriptor() ([]byte, []int) {
	return file_api_excel_gen_excel_gen_proto_rawDescGZIP(), []int{5}
}

func (x *ProjectsAndDebtors) GetItems() []*ProjectsAndDebtors_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type CostWithDebtors_Item struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Date             *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	UserName         string                 `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	DebtorName       string                 `protobuf:"bytes,4,opt,name=debtor_name,json=debtorName,proto3" json:"debtor_name,omitempty"`
	MinutesCosts     uint64                 `protobuf:"varint,5,opt,name=minutes_costs,json=minutesCosts,proto3" json:"minutes_costs,omitempty"`
	Description      *string                `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	WorkCategoryName *string                `protobuf:"bytes,7,opt,name=work_category_name,json=workCategoryName,proto3,oneof" json:"work_category_name,omitempty"`
	Time             string                 `protobuf:"bytes,8,opt,name=time,proto3" json:"time,omitempty"`
	DebtorGroup      string                 `protobuf:"bytes,9,opt,name=debtor_group,json=debtorGroup,proto3" json:"debtor_group,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CostWithDebtors_Item) Reset() {
	*x = CostWithDebtors_Item{}
	mi := &file_api_excel_gen_excel_gen_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostWithDebtors_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostWithDebtors_Item) ProtoMessage() {}

func (x *CostWithDebtors_Item) ProtoReflect() protoreflect.Message {
	mi := &file_api_excel_gen_excel_gen_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostWithDebtors_Item.ProtoReflect.Descriptor instead.
func (*CostWithDebtors_Item) Descriptor() ([]byte, []int) {
	return file_api_excel_gen_excel_gen_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CostWithDebtors_Item) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CostWithDebtors_Item) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *CostWithDebtors_Item) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CostWithDebtors_Item) GetDebtorName() string {
	if x != nil {
		return x.DebtorName
	}
	return ""
}

func (x *CostWithDebtors_Item) GetMinutesCosts() uint64 {
	if x != nil {
		return x.MinutesCosts
	}
	return 0
}

func (x *CostWithDebtors_Item) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CostWithDebtors_Item) GetWorkCategoryName() string {
	if x != nil && x.WorkCategoryName != nil {
		return *x.WorkCategoryName
	}
	return ""
}

func (x *CostWithDebtors_Item) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *CostWithDebtors_Item) GetDebtorGroup() string {
	if x != nil {
		return x.DebtorGroup
	}
	return ""
}

type ProjectsAndDebtors_Item struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId     uint64                 `protobuf:"varint,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ProjectName   string                 `protobuf:"bytes,4,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	Percentage    float64                `protobuf:"fixed64,5,opt,name=percentage,proto3" json:"percentage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectsAndDebtors_Item) Reset() {
	*x = ProjectsAndDebtors_Item{}
	mi := &file_api_excel_gen_excel_gen_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectsAndDebtors_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectsAndDebtors_Item) ProtoMessage() {}

func (x *ProjectsAndDebtors_Item) ProtoReflect() protoreflect.Message {
	mi := &file_api_excel_gen_excel_gen_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectsAndDebtors_Item.ProtoReflect.Descriptor instead.
func (*ProjectsAndDebtors_Item) Descriptor() ([]byte, []int) {
	return file_api_excel_gen_excel_gen_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ProjectsAndDebtors_Item) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProjectsAndDebtors_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectsAndDebtors_Item) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ProjectsAndDebtors_Item) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProjectsAndDebtors_Item) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

var File_api_excel_gen_excel_gen_proto protoreflect.FileDescriptor

var file_api_excel_gen_excel_gen_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x2f,
	0x65, 0x78, 0x63, 0x65, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x65, 0x78,
	0x63, 0x65, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x56, 0x0a, 0x10, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x65, 0x78, 0x63, 0x65, 0x6c,
	0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x30, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x47, 0x65, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x89, 0x03, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x48, 0x0a, 0x11, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x62,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x63,
	0x65, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x65, 0x62, 0x74, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x73, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x5f,
	0x67, 0x65, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x44,
	0x65, 0x62, 0x74, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x07, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x22, 0xac, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65,
	0x62, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x5f, 0x67, 0x65, 0x6e,
	0x2e, 0x43, 0x6f, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xe1, 0x02, 0x0a,
	0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x62, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xdd, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x41, 0x6e, 0x64,
	0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x5f, 0x67,
	0x65, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x65,
	0x62, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x1a, 0x8c, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x2a, 0x44, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x39, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x5f, 0x53, 0x55, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x53, 0x54, 0x10,
	0x02, 0x32, 0xf2, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x47, 0x65, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x65, 0x78, 0x63, 0x65, 0x6c,
	0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x78, 0x63, 0x65, 0x6c,
	0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x2e, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x65, 0x78, 0x63, 0x65, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x47,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x5f,
	0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x47, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x78, 0x63, 0x65,
	0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x47, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x4f, 0x54, 0x42, 0x55, 0x2f, 0x73, 0x6f, 0x74, 0x62, 0x69,
	0x73, 0x72, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x5f, 0x67, 0x65,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_excel_gen_excel_gen_proto_rawDescOnce sync.Once
	file_api_excel_gen_excel_gen_proto_rawDescData []byte
)

func file_api_excel_gen_excel_gen_proto_rawDescGZIP() []byte {
	file_api_excel_gen_excel_gen_proto_rawDescOnce.Do(func() {
		file_api_excel_gen_excel_gen_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_excel_gen_excel_gen_proto_rawDesc), len(file_api_excel_gen_excel_gen_proto_rawDesc)))
	})
	return file_api_excel_gen_excel_gen_proto_rawDescData
}

var file_api_excel_gen_excel_gen_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_excel_gen_excel_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_api_excel_gen_excel_gen_proto_goTypes = []any{
	(Status)(0),                     // 0: excel_gen.Status
	(Type)(0),                       // 1: excel_gen.Type
	(*ExcelGenRequest)(nil),         // 2: excel_gen.ExcelGenRequest
	(*ExcelGenResponse)(nil),        // 3: excel_gen.ExcelGenResponse
	(*ExcelGenStatusRequest)(nil),   // 4: excel_gen.ExcelGenStatusRequest
	(*ExcelGeneralRequest)(nil),     // 5: excel_gen.ExcelGeneralRequest
	(*CostWithDebtors)(nil),         // 6: excel_gen.CostWithDebtors
	(*ProjectsAndDebtors)(nil),      // 7: excel_gen.ProjectsAndDebtors
	(*CostWithDebtors_Item)(nil),    // 8: excel_gen.CostWithDebtors.Item
	(*ProjectsAndDebtors_Item)(nil), // 9: excel_gen.ProjectsAndDebtors.Item
	(*timestamppb.Timestamp)(nil),   // 10: google.protobuf.Timestamp
	(*structpb.Struct)(nil),         // 11: google.protobuf.Struct
}
var file_api_excel_gen_excel_gen_proto_depIdxs = []int32{
	1,  // 0: excel_gen.ExcelGenRequest.type:type_name -> excel_gen.Type
	10, // 1: excel_gen.ExcelGenRequest.created_at:type_name -> google.protobuf.Timestamp
	0,  // 2: excel_gen.ExcelGenResponse.status:type_name -> excel_gen.Status
	11, // 3: excel_gen.ExcelGeneralRequest.data:type_name -> google.protobuf.Struct
	10, // 4: excel_gen.ExcelGeneralRequest.created_at:type_name -> google.protobuf.Timestamp
	6,  // 5: excel_gen.ExcelGeneralRequest.cost_with_debtors:type_name -> excel_gen.CostWithDebtors
	7,  // 6: excel_gen.ExcelGeneralRequest.projects_and_debtors:type_name -> excel_gen.ProjectsAndDebtors
	8,  // 7: excel_gen.CostWithDebtors.items:type_name -> excel_gen.CostWithDebtors.Item
	9,  // 8: excel_gen.ProjectsAndDebtors.items:type_name -> excel_gen.ProjectsAndDebtors.Item
	10, // 9: excel_gen.CostWithDebtors.Item.date:type_name -> google.protobuf.Timestamp
	5,  // 10: excel_gen.ExcelGenService.GeneralGenerate:input_type -> excel_gen.ExcelGeneralRequest
	2,  // 11: excel_gen.ExcelGenService.Generate:input_type -> excel_gen.ExcelGenRequest
	4,  // 12: excel_gen.ExcelGenService.GetStatus:input_type -> excel_gen.ExcelGenStatusRequest
	3,  // 13: excel_gen.ExcelGenService.GeneralGenerate:output_type -> excel_gen.ExcelGenResponse
	3,  // 14: excel_gen.ExcelGenService.Generate:output_type -> excel_gen.ExcelGenResponse
	3,  // 15: excel_gen.ExcelGenService.GetStatus:output_type -> excel_gen.ExcelGenResponse
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_excel_gen_excel_gen_proto_init() }
func file_api_excel_gen_excel_gen_proto_init() {
	if File_api_excel_gen_excel_gen_proto != nil {
		return
	}
	file_api_excel_gen_excel_gen_proto_msgTypes[3].OneofWrappers = []any{
		(*ExcelGeneralRequest_CostWithDebtors)(nil),
		(*ExcelGeneralRequest_ProjectsAndDebtors)(nil),
	}
	file_api_excel_gen_excel_gen_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_excel_gen_excel_gen_proto_rawDesc), len(file_api_excel_gen_excel_gen_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_excel_gen_excel_gen_proto_goTypes,
		DependencyIndexes: file_api_excel_gen_excel_gen_proto_depIdxs,
		EnumInfos:         file_api_excel_gen_excel_gen_proto_enumTypes,
		MessageInfos:      file_api_excel_gen_excel_gen_proto_msgTypes,
	}.Build()
	File_api_excel_gen_excel_gen_proto = out.File
	file_api_excel_gen_excel_gen_proto_goTypes = nil
	file_api_excel_gen_excel_gen_proto_depIdxs = nil
}
